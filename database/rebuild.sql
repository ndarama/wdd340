-- Drop existing if rebuilding
DROP TABLE IF EXISTS inventory CASCADE;
DROP TABLE IF EXISTS account CASCADE;
DROP TABLE IF EXISTS classification CASCADE;
DROP TABLE IF EXISTS review CASCADE;
DROP TYPE IF EXISTS account_type;

-- Create ENUM for account_type
CREATE TYPE account_type AS ENUM ('Employee', 'Client', 'Admin');



-- Creating the 'classification' table structure
CREATE TABLE public.classification (
    classification_id INT GENERATED BY DEFAULT AS IDENTITY,
    classification_name CHARACTER VARYING NOT NULL,
    CONSTRAINT classification_pk PRIMARY KEY (classification_id)
);


-- Table structure for table `account`
CREATE TABLE IF NOT EXISTS public.account
(
    account_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    account_firstname character varying NOT NULL,
    account_lastname character varying NOT NULL,
    account_email character varying NOT NULL,
    account_password character varying NOT NULL,
    account_type account_type NOT NULL DEFAULT 'Client'::account_type,
    CONSTRAINT account_pkey PRIMARY KEY (account_id)
);

-- Creating the 'inventory' table structure
CREATE TABLE IF NOT EXISTS public.inventory (
    inv_id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    inv_make           CHARACTER VARYING NOT NULL,
    inv_model          CHARACTER VARYING NOT NULL,
    inv_year           CHARACTER(4) NOT NULL,
    inv_description    TEXT NOT NULL,
    inv_image          CHARACTER VARYING NOT NULL,
    inv_thumbnail      CHARACTER VARYING NOT NULL,
    inv_price          NUMERIC(9, 0) NOT NULL,
    inv_miles          INTEGER NOT NULL,
    inv_color          CHARACTER VARYING NOT NULL,
    classification_id  INTEGER NOT NULL,
    CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
);

-- Creating the 'review' table structure
CREATE TABLE IF NOT EXISTS public.review (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    inv_id INTEGER NOT NULL,
    account_id INTEGER NOT NULL,
    review_text TEXT NOT NULL,
    review_rating INTEGER NOT NULL,
    review_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT review_pkey PRIMARY KEY (review_id),
    CONSTRAINT fk_inventory FOREIGN KEY (inv_id)
        REFERENCES public.inventory (inv_id)
        MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT fk_account FOREIGN KEY (account_id)
        REFERENCES public.account (account_id)
        MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    CONSTRAINT check_rating CHECK (review_rating >= 1 AND review_rating <= 5)
);


-- Inserting multiple records into the 'classification' table
INSERT INTO public.classification (classification_name)
VALUES 
    ('Custom'),
    ('Sport'),
    ('SUV'),
    ('Truck'),
    ('Sedan');


-- Establishing relationship between 'classification' and 'inventory' tables
ALTER TABLE IF EXISTS public.inventory
ADD CONSTRAINT fk_classification
    FOREIGN KEY (classification_id)
    REFERENCES public.classification (classification_id)
    MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE NO ACTION;

-- Queries: 1. Insert Tony Stark
INSERT INTO account (account_firstname, account_lastname, account_email, account_password)
VALUES ('Tony', 'Stark', 'tony@starkent.com', 'Iam1ronM@n');

-- Queries 2. Update Tony Stark to Admin
UPDATE account
SET account_type = 'Admin'
WHERE account_email = 'tony@starkent.com';

-- Queries 3. Update Hummer description
UPDATE inventory
SET inv_description = REPLACE(inv_description, 'small interiors', 'a huge interior')
WHERE inv_make = 'GM' AND inv_model = 'Hummer';

-- Queries 4. Update image paths
UPDATE inventory
SET inv_image = REPLACE(inv_image, '/images/', '/images/vehicles/'),
    inv_thumbnail = REPLACE(inv_thumbnail, '/images/', '/images/vehicles/');
